
Class Level Modifiers

1. Public : Classes with public access modifiers can be accessed from anywhere in the project. inside the project, outside the project, sub-classes, interfaces all have access to public classes.

ex: public class A{

    }


2. Default : if we do not specify the modifier while declaring the class, by default it takes its access modifier as Default,

    Default classes can be accessed only within the class. // Default modifier is also known as package level access modifier.

  //  Object Creation for Abstract classes

    if the class is Abstract, then Object creation is not possible for such classes,

    if the class is not abstract, then we can create objects for such default classes.


  // Child class creation (Sub classes) Inheritance

  If the parent uclass is final, then child class creation or instantiation not possible,

  If the class is not final then we can create sub classes.

    ex: class B{

    }

   for top level classes what are the modifiers allowed ?

    Public
    Default
    Abstract
    Final
    Strictfp (Strict floating point)

    for inner classes the modifiers which can be used are

    Public
    Default
    Abstract
    Final
    Strictfp

    private     }
    protected   } Applicable only to inner classes.
    static.     }


3. Abstract Modifier :

    what is the need for Abstract Modifier

    When you do not know the implementation details of the method but you need to declare it, so that you can implement the method later, so we use Abstract methods.

  //  Where is Abstract Modifier used in ?
  //  Abstract Modifiers are used mainly in methods, class.
      Abstract modifier cannot be applied to variables


  // what is Abstract method ?

    Abstract method has only declaration, but no implementation, such methods which are only declared are called as Abstract methods.

    Abstract method declaration ends with `;` and not with { }.

    ex: public abstract int vehicleType ();
    ex: public abstract String resourceType ();

    Now, Abstract classes are been declared, How is the Abstract methods been implemented then ?

    The Sub classes or the child classes which inherit the properties of parent class or Base class can implement the Abstract methods.


    // If any class contains at-least one Abstract method, then compulsorily that class should be Abstract.


    // Abstract Class

    When do you declare a class as Abstract Class.

    If the implementation of the class is not complete, or if the class is not appropriate or if the class contains at-least one `Abstract Method`, then such classes can be declared as Abstract class.

    If a class is declared as Abstract, then we cannot create objects for the Abstract class and we cannot access the methods present in the Abstract class directly.

    when a class has been declared as abstract, we cannot create object because, the Abstract class can contain methods which are not completely implemented, when we try to create the object to the Abstract class and use it, it will throw Compile time error, so we need to access the Abstract method from the class which extends the Abstract class, by creating a Object for the derived class and by using `Super Keyword` we can access the Abstract Classes and methods.


    // can we declare a class as Abstract, even though the class does not contain any Abstract method.

    yes we can declare a class as Abstract, even if it does not contain any Abstract method, if we think that the class is partially implemented.

    ex: Adapter class
        HttpServlet does not contain any abstract methods, but still these two classes are Abstract classes.