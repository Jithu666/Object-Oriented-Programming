

                            // Method Overriding

            // In Overloading method resolution is always done by the JVM at run-time

    if the child class which extends a parent class is not satisfied with the implementation of the methods in the parent class and want to re-write its own methods in the derived class, then such re-written methods are called as Overridden methods.

    The methods declared in the parent class are called as Overridden methods.
    The methods declared in the Child class are called as Overriding methods.


    When we create a object for child class with parent reference, then the parent reference classes method will be invoked by the compiler.


    Overloading does not depend on the Object created for the class but depends on the run-time reference / which class is calling the method, that is why we call Overloading as Compile time Polymorphism                                   ^
                                              ^                                                 |
                                              |                                                 |
        methodOverloading mo = new methodOverloading() |----------------------------------------|
            |------------------------------------------|


    When we create a object for child class with parent reference, then the parent reference classes method will be invoked by the compiler.

    In Overriding, Compiler will first invoke the parent class reference method, at compile timme.

        later when the JVM is executing the .class file, is encounters the child class object creation, and then JVM invokes the child class's
        method at runtime.


    Method Overriding is also called as Dynamic polymorphism, late binding or Run-time Polymorphism.


    // Rules for Method Overriding

    Method's name of both overridden and overriding methods should be same.

    Argument type and order of argument type of the Overriding method should be same as overridden method.

    Also the Overriding method should contain the same number of arguments as that of Overridden method.


                // Co-Variant Return types..

   Until java version 1.4 the method name, number of arguments, argument type, return type of Overriding should match with method name, number of arguments, argument type, return type of Overridden method.

    from java version 1.5 the return type need not exactly be the same as that of overridden method, Overriding methods can also have any of the child return types of the return type mentioned in the Overridden methods. this is called as Co-Variance.

    ex: Overridden method has the return type of Object

        Overriding method can hava return type of String, StringBuffer, int, float etc.


   Co-variant return types are only Compatible with Object type and not with Primitives


    method overriding is not accepted in private methods.

    if we try to override a private method by creating a overriding method with same name, return type, number of arguments, argument type, and also the same access modifier as private, then also the child class cannot override the method in parent class is private.

    if we do so then a independent standalone method will be created in the child class which has no connection with the method in the parent class.

    // method overriding is not possible in final methods.

    // parent class method declared as final, then the child class cannot override the parent class finale method, once any method declared as final, no class or method can override such classes and methods.


    // In Overriding we cannot reduce the scope of access modifiers, but if we need we can increase the scope of access specifiers.

    we cannot make a public method into -> protected -> default -> private

   default can be increased to protected -> public

   protected can be increased to public

   protected -> public.

   but private methods cannot be overridden,

    if we try to decrease the scope the overriding method then the compiler will throw an error stating, attempting to assign weaker access modifier


    // Exception handling

    Java Object class is the (parent let's assume parent class as `p`) class for all classes in java, if the p class is not extended by any other class.

    Classes and Sub classes inside "Java Object Class"

                                                            OBJECT
                                                               |
                            ---------------------------------------------------------------------------------------------
                            |      |            |           |           |           |           |           |           |
                        String  StringBuffer  Number    Collection    Thread    Throwable   File IO     Collection     Primitive classes
                                                                                    |
                                                                    -----------------------------------------------------
                                                                    |                                                   |
                                                                Exception                                             Error
                                                                    |                                                   |
                        ------------------------------------------------------------                            --------------
                        |                 |                |                       |                            |
            RunTime Exception       IO Exception    Interrupt Exception     Servlet Exception              Virtual Machine Error
                           |          |                                                                       |
  Arithmetic Exception  <- |          | -> File Not Found                                        -------------------------------------
                           |          |                                                          |                                    |
 Null Pointer Exception <- |          | -> End Of File Exception                           Out of Memory Error           Stack Overflow error
                           |
 Class Cast Exception   <- |


        Runtime Exception and its sub-classes & Error and its sub-classes are called as Unchecked Exceptions

        All other exceptions are called as Checked Exceptions.


        Compiler is not going to check whether you have handled or not, these kind of exceptions are called as Unchecked Exceptions.
        If the Compiler checks whether you have handled the exceptions or not, these kind of exceptions are called as Checked Exceptions.


        // If the Child class (Overriding class) method throw any exception then the parent class (Overridden class) must throe the same exception or the Class Exception in which the sub-class exception is present, this is only applicable for Checked Exceptions


        for example : if child class method throws Divide By Zero Exception, then the parent class method also should throw same Divide by Zero Exception or else the parent Class should throw Arithmetic Exception. if not the compiler will throw an Exception.